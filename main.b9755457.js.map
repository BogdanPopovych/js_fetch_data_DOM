{"version":3,"sources":["scripts/main.js"],"names":["LIST_URL","DETAILS_URL","body","document","querySelector","list","createElement","append","getPhones","url","fetch","then","response","ok","Error","status","json","printErr","error","setTimeout","printList","value","innerHTML","map","el","name","join","catch","getPhonesDetails","phoneId","phonesWithDetails","result","e","id","res","push"],"mappings":";AAAA,aAIA,IAAMA,EACF,wEACEC,EACF,oEACEC,EAAOC,SAASC,cAAc,QAC9BC,EAAOF,SAASG,cAAc,MAEpCJ,EAAKK,OAAOF,GAEZ,IAAMG,EAAY,SAAAC,GACTC,OAAAA,MAAMD,GAAKE,KAAK,SAAAC,GACjB,IAACA,EAASC,GACN,MAAA,IAAIC,MAA2BF,oBAAAA,EAASG,QAGzCH,OAAAA,EAASI,UAIpB,SAASC,EAASC,GAChBC,WAAW,WACH,MAAA,IAAIL,MAAwCI,iCAAAA,IACjD,KAGL,SAASE,EAAUC,GACjBhB,EAAKiB,UAAYD,EACdE,IAAI,SAAAC,GACWA,MAAAA,OAAAA,OAAAA,EAAGC,KAAjB,WAEDC,KAAK,IAEVlB,EAAUR,GAAUW,KAAKS,GAAWO,MAAMV,GAE1C,IAAMW,EAAmB,SAACnB,EAAKoB,GACtBnB,OAAAA,MAASD,GAAAA,OAAAA,GAAMoB,OAAAA,EAAf,UAA+BlB,KAAK,SAAAC,GACrC,IAACA,EAASC,GACN,MAAA,IAAIC,MAA2BF,oBAAAA,EAASG,QAGzCH,OAAAA,EAASI,UAIdc,EAAoB,GAE1BtB,EAAUR,GAAUW,KAAK,SAAAoB,GACvBA,EAAOR,IAAI,SAAAS,GACTJ,EAAiB3B,EAAa+B,EAAEC,IAAItB,KAAK,SAAAuB,GACvCJ,EAAkBK,KAAK,CAACH,EAAGE","file":"main.b9755457.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write your code here\n\nconst LIST_URL\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/phones.json';\nconst DETAILS_URL\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/phones/';\nconst body = document.querySelector('body');\nconst list = document.createElement('ul');\n\nbody.append(list);\n\nconst getPhones = url => {\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      throw new Error(`Error from server`, response.status);\n    }\n\n    return response.json();\n  });\n};\n\nfunction printErr(error) {\n  setTimeout(() => {\n    throw new Error(`Can't recieve data from server`, error);\n  }, 1000);\n}\n\nfunction printList(value) {\n  list.innerHTML = value\n    .map(el => {\n      return `<li>${el.name}</li>`;\n    })\n    .join('');\n}\ngetPhones(LIST_URL).then(printList).catch(printErr);\n\nconst getPhonesDetails = (url, phoneId) => {\n  return fetch(`${url}${phoneId}.json`).then(response => {\n    if (!response.ok) {\n      throw new Error(`Error from server`, response.status);\n    }\n\n    return response.json();\n  });\n};\n\nconst phonesWithDetails = [];\n\ngetPhones(LIST_URL).then(result => {\n  result.map(e => {\n    getPhonesDetails(DETAILS_URL, e.id).then(res => {\n      phonesWithDetails.push([e, res]);\n    });\n  });\n});\n"]}